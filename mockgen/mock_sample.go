// Code generated by MockGen. DO NOT EDIT.
// Source: sample.go

// Package mock_sample is a generated GoMock package.
package mock_sample

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockSample is a mock of Sample interface
type MockSample struct {
	ctrl     *gomock.Controller
	recorder *MockSampleMockRecorder
}

// MockSampleMockRecorder is the mock recorder for MockSample
type MockSampleMockRecorder struct {
	mock *MockSample
}

// NewMockSample creates a new mock instance
func NewMockSample(ctrl *gomock.Controller) *MockSample {
	mock := &MockSample{ctrl: ctrl}
	mock.recorder = &MockSampleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSample) EXPECT() *MockSampleMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockSample) Update(str string, num int, t time.Time) error {
	ret := m.ctrl.Call(m, "Update", str, num, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSampleMockRecorder) Update(str, num, t interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSample)(nil).Update), str, num, t)
}

// Get mocks base method
func (m *MockSample) Get(str string) int {
	ret := m.ctrl.Call(m, "Get", str)
	ret0, _ := ret[0].(int)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockSampleMockRecorder) Get(str interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSample)(nil).Get), str)
}
